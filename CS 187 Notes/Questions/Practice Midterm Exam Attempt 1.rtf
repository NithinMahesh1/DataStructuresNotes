{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 CourierNewPSMT;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red255\green45\blue64;\red255\green49\blue75;\red255\green40\blue62;
}
\margl1440\margr1440\vieww17300\viewh13380\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 1. 
\fs24 \
     a. B\
     b. [1,2,3,null,5]\
     c. false\
     d. Base\
         Base \
         Derived \
         //Base y = new Derived(); would run into an error \
     e. \
\
\pard\pardeftab720\partightenfactor0

\f1\fs30 \cf0 \expnd0\expndtw0\kerning0
public boolean hasNext() \{\
	if(this.current.getNext() != null) \{\
	    return true;\
	\}\
   return false;
\f2\fs24 \

\f1\fs30 \} \
\
public boolean hasNext() \{\
	return this.current != null;\
\}\
\cf2 public E next() \{\
	if(hasNext()) \{\uc0\u8232 		E result = current.getData(); \
		current = current.getNext(); \
		return result; \
	\}
\f2\fs24 \

\f1\fs30 \} \
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0      f. 	6\
	2\
	7\
	1\
\
  \cf3    g.  	1\
	4\
	123\
	5\
	13\
	6\
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs40 \cf0 2.\

\f1\fs30 \expnd0\expndtw0\kerning0
  
\f0\fs24 \kerning1\expnd0\expndtw0 a. O(N)\
      b. O(1)\
      c. O(N)\
      d. O(1)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4       e. O(N^2)\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs40 \cf0 3. 
\fs24 \

\f1\fs30 \expnd0\expndtw0\kerning0
public class ArrayStack<T> implements BoundedStackInterface<T> \{ 
\f2\fs24 \
\pard\pardeftab720\partightenfactor0

\f1\fs30 \cf0 	protected final int DEFCAP = 100; //default capacity \
	protected T[ ] stack; // holds stack elements \
	protected int size; 
\f2\fs24 \

\f1\fs30 \
	public ArrayStack( ) \{\uc0\u8232 		stack = (T[ ]) new Object[DEFCAP]; 
\f2\fs24 \

\f1\fs30 	\} \

\f2\fs24 \

\f1\fs30 	public ArrayStack(int maxSize) \{\uc0\u8232 		stack = (T[ ]) new Object[maxSize]; 
\f2\fs24 \

\f1\fs30 	\}\
\uc0\u8232 	public void push (T element) throws StackOverflowException \{ \
		if(isFull()) \{\
			throw new StackOverflowException (\'93push to full stack\'94);\
		\}\
		for(int i=size; i>0; i\'97) \{\
			stack[i] = stack[i-1];\
		\}\
		stack[0] = element;\
		size++;
\f2\fs24 \

\f1\fs30 	\} 
\f2\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0  \
\pard\pardeftab720\partightenfactor0

\f1\fs30 \cf0 \expnd0\expndtw0\kerning0
	public T pop( ) throws StackUnderflowException\{ \
		if(isEmpty()) \{\
			throw new StackUnderFlowException (\'93pop from empty stack\'94);\
		\}\
		<T> ret = stack[0];\
		for(int i = 0; i<(size-1); i++) \{\
			stack[i] = stack[i+1];\
		\}\
		size\'97;\
		return ret;\
	\}
\f2\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs40 \cf0 \kerning1\expnd0\expndtw0 4.\

\f1\fs30 \expnd0\expndtw0\kerning0
public class LinkedStack<T> implements StackInterface<T> \{ \
	LLNode<T> head; \
	int size = 0;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs30 \cf0 	public LinkedStack()\{ \
		head = null;
\f2\fs24 \

\f1\fs30 	\} \
\
	public int size() \{ // 
\f2\b Your size() method should be O(1) \

\b0\fs24 		
\f1\fs30 return size;
\f2\fs24 \

\f1\fs30 	\}\
\uc0\u8232 	public boolean isEmpty() \{ \

\f2\fs24 		
\f1\fs30 if(size() == 0) \{\
			return true;\
		\}\
		return false;
\f2\fs24 \

\f1\fs30 	\}\
\uc0\u8232 	public T pop() throws StackUnderflowException \{ \

\f2\fs24 		
\f1\fs30 if(isEmpty()) \{\
			throw new StackUnderFlowException(\'93pop from empty stack\'94);\
		\}\
		T stack = head.getData();\
		head = head.getNext();\
		size\'97; \
		return stack;
\f2\fs24 \

\f1\fs30 	\} \
\
	public void push(T elem) \{ \
		LLNode<T> newNode = new LLNode(elem);\
\
		newNode.setData(head);\
		head = newNode;\
\
		size++;
\f2\fs24 \
	\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
         }