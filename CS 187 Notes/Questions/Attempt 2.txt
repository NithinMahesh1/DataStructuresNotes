{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww15360\viewh13560\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf0 \expnd0\expndtw0\kerning0
public class ArrayStack<T> implements BoundedStackInterface<T> \{ \

\f1\fs24 \

\f0\fs30 	protected final int DEFCAP = 100; //default capacity \
	protected T[ ] stack; // holds stack elements \
	protected int size; \

\f1\fs24 \

\f0\fs30 	public ArrayStack( ) \{\uc0\u8232 		stack = (T[ ]) new Object[DEFCAP]; 
\f1\fs24 \

\f0\fs30 	\}\
 
\f1\fs24 \

\f0\fs30 	public ArrayStack(int maxSize) \{\uc0\u8232 		stack = (T[ ]) new Object[maxSize]; 
\f1\fs24 \

\f0\fs30 	\}\uc0\u8232 	\
	public void push (T element) throws StackOverflowException \{ 
\f1\fs24 \

\f0\fs30 		if(isFull()) \{\
			throw new StackOverFlowException (\'93push to full stack\'94);\
		\}\
		for(int i = size; i>0; i\'97 ) \{\
			stack[i] = stack[i-1];\
		\}\
		stack[0] = element;\
		size++;\
	\} \
\
	public T pop( ) throws StackUnderflowException\{\
		if(isEmpty()) \{\
			throw new StackUnderFlowException(\'93pop empty stack\'94);\
		\}\
		T temp = stack[0];\
		for(int i=0; i<(size-1); i++) \{s\
			stack[i] = stack[i+1];\
		\}\
		size\'97;\
		return temp;\
	\}\
\
\
_____________________________________________________________________________________\
\
public class LLNode<T> \{ \
	private T data; 
\f1\fs24 \

\f0\fs30 	private LLNode<T> next; 
\f1\fs24 \

\f0\fs30 \
	public LLNode(T data) \{ this.data = data; 
\f1\fs24 \

\f0\fs30 	\
	\}\uc0\u8232 \
	public T getData() \{ 
\f1\fs24 \

\f0\fs30 		return data; \
	\} 
\f1\fs24 \

\f0\fs30 \
	public void setData(T data) \{ \
		this.data = data; 
\f1\fs24 \

\f0\fs30 	\}\
\uc0\u8232 	public LLNode<T> getNext() \{ 
\f1\fs24 \

\f0\fs30 		return next; \
	\} 
\f1\fs24 \

\f0\fs30 \
	public void setNext(LLNode<T> next) \{ \
		this.next = next; 
\f1\fs24 \

\f0\fs30 	\} \
\
\} 
\f1\fs24 \

\f0\fs30 \

\f1\fs24 \

\f0\fs30 public class LinkedStack<T> implements StackInterface<T> \{ \
	LLNode<T> head; \
	int size;\

\f1\fs24 \

\f0\fs30 	public LinkedStack()\{\
 		head = null;
\f1\fs24 \

\f0\fs30 	\} \

\f1\fs24 \

\f0\fs30 	public int size() \{ // 
\f1\b Your size() method should be O(1) \

\b0\fs24 		
\f0\fs30 return size;
\f1\fs24 \

\f0\fs30 	\}\
\uc0\u8232 	public boolean isEmpty() \{\
		if(size() == 0) \{\
			return true;\
		\}\
		return false;\
	\}
\f1\fs24 \
\

\f0\fs30 	public T pop() throws StackUnderflowException \{ \

\f1\fs24 		
\f0\fs30 if(head == null) \{\
			throw new StackUnderflowException;\
		\}\
		T temp = head.getData();\
		head = head.getNext();\
		size\'97;\
		return head;
\f1\fs24 \

\f0\fs30 	\} \

\f1\fs24 \

\f0\fs30 	public void push(T elem) \{ \
		LLNode<T> newNode = new LLNode<T>(elem);	\
		\
		newNode.setNext(head);\
		head = newNode;\
\
		size++;\
	\}
\f1\fs24 \
\
\pard\pardeftab720\sl340\sa240\partightenfactor0
\cf0 \
}