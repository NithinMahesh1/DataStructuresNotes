# You have a RecentCounter class which counts the number of recent requests within a certain time frame.

# Implement the RecentCounter class:
# RecentCounter() Initializes the counter with zero recent requests.
# int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). 
# Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].
# It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.

 

# Example 1:

# Input
# ["RecentCounter", "ping", "ping", "ping", "ping"]
# [[], [1], [100], [3001], [3002]]
# Output
# [null, 1, 2, 3, 3]

# Explanation
# RecentCounter recentCounter = new RecentCounter();
# recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1
# recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2
# recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3
# recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3

from collections import deque

class RecentCounter:

    def __init__(self):
        self.queue = deque()

    def ping(self, t: int) -> int:
        lower = t - 3000

        # First we check the current t is in the range
        # Then we loop and check if there are others in the queue in the same range
        # Count each of the ones in the queue within the range and return counter

        self.queue.append(t)

        # Remember in this instance we loop backwards since we are popping off the left or front of the queue
        # We do this to avoid issues with indexing if we are removing elems in the front of the queue while looping
        counter = 0
        for i in range(len(self.queue) - 1,-1,-1):
            if self.queue[i] >= lower and self.queue[i] <= t:
                counter += 1
            else:
                self.queue.popleft()

        return counter


# obj = RecentCounter()
# param_1 = obj.ping(642)
# print(param_1)
# param_2 = obj.ping(1849)
# print(param_2)
# param_3 = obj.ping(4921)
# print(param_3)
# param_4 = obj.ping(5936)
# print(param_4)
# param_5 = obj.ping(5957)
# print(param_5)


obj = RecentCounter()
param_1 = obj.ping(1)
print(param_1)
param_2 = obj.ping(100)
print(param_2)
param_3 = obj.ping(3001)
print(param_3)
param_4 = obj.ping(3002)
print(param_4)


# Your RecentCounter object will be instantiated and called as such:
# obj = RecentCounter()
# param_1 = obj.ping(t)